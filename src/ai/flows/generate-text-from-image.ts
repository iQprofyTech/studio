'use server';

/**
 * @fileOverview An image description AI agent.
 *
 * - generateTextFromImage - A function that handles the image description process.
 * - GenerateTextFromImageInput - The input type for the generateTextFromImage function.
 * - GenerateTextFromImageOutput - The return type for the generateTextFromImage function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTextFromImageInputSchema = z.object({
  photoDataUri: z
    .string()
    .describe(
      'A photo, as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.' // lgtm[js/incomplete-url-sanitization]
    ),
});
export type GenerateTextFromImageInput = z.infer<
  typeof GenerateTextFromImageInputSchema
>;

const GenerateTextFromImageOutputSchema = z.object({
  description: z
    .string()
    .describe('A description of the image, generated by AI.'),
});
export type GenerateTextFromImageOutput = z.infer<
  typeof GenerateTextFromImageOutputSchema
>;

export async function generateTextFromImage(
  input: GenerateTextFromImageInput
): Promise<GenerateTextFromImageOutput> {
  return generateTextFromImageFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateTextFromImagePrompt',
  input: {schema: GenerateTextFromImageInputSchema},
  output: {schema: GenerateTextFromImageOutputSchema},
  prompt: `You are an expert AI image descriptor.

You will use this information to create a description of the image.

Description:
{{media url=photoDataUri}}`,
});

const generateTextFromImageFlow = ai.defineFlow(
  {
    name: 'generateTextFromImageFlow',
    inputSchema: GenerateTextFromImageInputSchema,
    outputSchema: GenerateTextFromImageOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
